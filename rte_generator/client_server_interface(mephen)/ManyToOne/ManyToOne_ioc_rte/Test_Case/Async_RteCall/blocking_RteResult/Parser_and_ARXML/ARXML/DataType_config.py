import os, sys
import pdb
from autosarfactory import autosarfactory

datatype_file = os.path.join(os.path.dirname(__file__), 'swc', 'Datatype.arxml') 

TPC_Composition_ARPackage = autosarfactory.new_file(datatype_file, defaultArPackage = 'CS_Composition', overWrite = 'true') 
Datatypes_ARPackage = TPC_Composition_ARPackage.new_ARPackage('Datatypes')
BaseTypes_ARPackage = Datatypes_ARPackage.new_ARPackage('BaseTypes')
Uint8 = BaseTypes_ARPackage.new_SwBaseType('Uint8')
Uint8.set_category('FIXED_LENGTH')
Uint8_baseTypeDefinition = Uint8.new_BaseTypeDirectDefinition()
Uint8_baseTypeDefinition.set_baseTypeSize('8')
Uint8_baseTypeDefinition.set_baseTypeEncoding('NONE')
Uint8_baseTypeDefinition.set_nativeDeclaration('uint8')

Uint16 = BaseTypes_ARPackage.new_SwBaseType('Uint16')
Uint16.set_category('FIXED_LENGTH')
Uint16_baseTypeDefinition = Uint16.new_BaseTypeDirectDefinition()
Uint16_baseTypeDefinition.set_baseTypeSize('16')
Uint16_baseTypeDefinition.set_baseTypeEncoding('NONE')
Uint16_baseTypeDefinition.set_nativeDeclaration('uint16')

Float32 = BaseTypes_ARPackage.new_SwBaseType('Float32')
Float32.set_category('FIXED_LENGTH')
Float32_baseTypeDefinition = Float32.new_BaseTypeDirectDefinition()
Float32_baseTypeDefinition.set_baseTypeSize('32')
Float32_baseTypeDefinition.set_baseTypeEncoding('IEEE754')
Float32_baseTypeDefinition.set_nativeDeclaration('float32')

Float64 = BaseTypes_ARPackage.new_SwBaseType('Float64')
Float64.set_category('FIXED_LENGTH')
Float64_baseTypeDefinition = Float64.new_BaseTypeDirectDefinition()
Float64_baseTypeDefinition.set_baseTypeSize('64')
Float64_baseTypeDefinition.set_baseTypeEncoding('IEEE754')
Float64_baseTypeDefinition.set_nativeDeclaration('float64')

ImplementationDataTypes_ARPackage= Datatypes_ARPackage.new_ARPackage('ImplementationDataTypes')
Impl_uint8 = ImplementationDataTypes_ARPackage.new_ImplementationDataType('Impl_uint8')
Impl_uint8.set_category('VALUE')
Impl_uint8.set_typeEmitter('RTE')
Impl_uint8_SymbolProps = Impl_uint8.new_SymbolProps('Impl_uint8_symbol')
Impl_uint8_SymbolProps.set_symbol('MyUint8OfVendorID')
Impl_uint8_SwDefProps = Impl_uint8.new_SwDataDefProps().new_SwDataDefPropsVariant()
Impl_uint8_SwDefProps.set_baseType(Uint8)
# swDefProps_num_value_sepc = Impl_uint8_SwDefProps.new_NumericalValueSpecification()
# swDefProps_num_value_sepc.set_shortLabel('DefaultInvalidValue_Uint8')
# swDefProps_num_value_sepc_value = swDefProps_num_value_sepc.new_Value()
# swDefProps_num_value_sepc_value.set(314159265358979)

Impl_uint16 = ImplementationDataTypes_ARPackage.new_ImplementationDataType('Impl_uint16')
Impl_uint16.set_category('VALUE')
Impl_uint16.set_typeEmitter('RTE')
Impl_uint16_SymbolProps = Impl_uint16.new_SymbolProps('Impl_uint16_symbol')
Impl_uint16_SymbolProps.set_symbol('MyUint16OfVendorID')
Impl_uint16_SwDefProps = Impl_uint16.new_SwDataDefProps().new_SwDataDefPropsVariant()
Impl_uint16_SwDefProps.set_baseType(Uint16)
# swDefProps_num_value_sepc = Impl_uint16_SwDefProps.new_NumericalValueSpecification()
# swDefProps_num_value_sepc.set_shortLabel('DefaultInvalidValue_Uint16')
# swDefProps_num_value_sepc_value = swDefProps_num_value_sepc.new_Value()
# swDefProps_num_value_sepc_value.set(100)

Impl_float32 = ImplementationDataTypes_ARPackage.new_ImplementationDataType('Impl_float32')
Impl_float32.set_category('VALUE')
Impl_float32.set_typeEmitter('RTE')
Impl_float32.new_SwDataDefProps().new_SwDataDefPropsVariant().set_baseType(Float32)
Impl_float32_SymbolProps = Impl_float32.new_SymbolProps('Impl_float32_symbol')
Impl_float32_SymbolProps.set_symbol('MyFloat32')

Impl_float64 = ImplementationDataTypes_ARPackage.new_ImplementationDataType('Impl_float64')
Impl_float64.set_category('VALUE')
Impl_float64.set_typeEmitter('RTE')
Impl_float64_SymbolProps = Impl_float64.new_SymbolProps('Impl_float64_symbol')
Impl_float64_SymbolProps.set_symbol('MyFloat64')
Impl_float64_SwDefProps = Impl_float64.new_SwDataDefProps().new_SwDataDefPropsVariant()
Impl_float64_SwDefProps.set_baseType(Float64)
swDefProps_num_value_sepc = Impl_float64_SwDefProps.new_NumericalValueSpecification()
swDefProps_num_value_sepc.set_shortLabel('DefaultInvalidValue_Float64')
swDefProps_num_value_sepc_value = swDefProps_num_value_sepc.new_Value()
swDefProps_num_value_sepc_value.set(3.14159265358979)

ApplicationDataTypes_ARPackage= Datatypes_ARPackage.new_ARPackage('ApplicationDataTypes')
App_uint8 = ApplicationDataTypes_ARPackage.new_ApplicationPrimitiveDataType('App_uint8')
App_uint8.set_category('VALUE')
App_uint8_SwDefProps = App_uint8.new_SwDataDefProps().new_SwDataDefPropsVariant()

App_uint16 = ApplicationDataTypes_ARPackage.new_ApplicationPrimitiveDataType('App_uint16')
App_uint16.set_category('VALUE')
App_uint16_SwDefProps = App_uint16.new_SwDataDefProps().new_SwDataDefPropsVariant()

DataTypeMappingSets_ARPackage= Datatypes_ARPackage.new_ARPackage('DataTypeMappingSets')
DataTypeMappingSet_A = DataTypeMappingSets_ARPackage.new_DataTypeMappingSet("DataTypeMappingSet_A")

# DataTypeMappingSet_A_DataTypeMapping_1 = DataTypeMappingSet_A.new_DataTypeMap('DTM_A1')
# DataTypeMappingSet_A_DataTypeMapping_1.set_implementationDataType(Impl_float64)
DataTypeMappingSet_A_DataTypeMapping_2 = DataTypeMappingSet_A.new_DataTypeMap('DTM_A2')
DataTypeMappingSet_A_DataTypeMapping_2.set_applicationDataType(App_uint8)
DataTypeMappingSet_A_DataTypeMapping_2.set_implementationDataType(Impl_uint8)
DataTypeMappingSet_A_DataTypeMapping_3 = DataTypeMappingSet_A.new_DataTypeMap('DTM_A3')
DataTypeMappingSet_A_DataTypeMapping_3.set_applicationDataType(App_uint16)
DataTypeMappingSet_A_DataTypeMapping_3.set_implementationDataType(Impl_uint16)

# DataTypeMappingSet_A_DataTypeMapping_1 = DataTypeMappingSet_A.new_DataTypeMap('DTM_Obv1')
# DataTypeMappingSet_A_DataTypeMapping_1.set_implementationDataType(Impl_float32)
# DataTypeMappingSet_A_DataTypeMapping_2 = DataTypeMappingSet_A.new_DataTypeMap('DTM_Obv2')


autosarfactory.save()
