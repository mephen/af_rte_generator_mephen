from generator.config import config
from gen.cores import app_cores
from generator import globals as gr

global config
global app_cores
gr.genfile = open(gr.application_path  + "hook.c",'w')

gr.printFile("#include \"typedefine.h\"")
gr.printFile("#include \"scheduler.h\"")
gr.printFile("#include \"memprot.h\"")
gr.printFile("#include \"os.h\"")
gr.printFile("#include \"task.h\"")
gr.printFile("#include \"string_format_test.h\"") 
gr.printFile("extern CoreIdType _CoreID;")
gr.printFile("extern int kernelDisableMPUCounter;\n")
gr.printFile("#pragma section GLOBAL_RAM_A\n")

gr.printFile("char my_prot_err_str_arr[32];\n")

gr.printFile("#pragma section default")
gr.printFile("extern int PrintText(char *TextArray);\n")

gr.printFile("/* Brief PreTaskHook */")
gr.printFile("void PreTaskHook(void)")
gr.printFile("{")
gr.printFile("}\n")

gr.printFile("/* Brief PostTaskHook */")
gr.printFile("void PostTaskHook(void)")
gr.printFile("{")
gr.printFile("}\n")

gr.printFile("/* Brief ErrorHook */")
gr.printFile("void ErrorHook(StatusType Error)")
gr.printFile("{   ")
gr.printFile("    //DisableMPU();")
gr.printFile("    TaskType taskID;")
gr.printFile("    GetTaskID(&taskID);")
gr.printFile("    PrintText(\"System Error Hook:\\r\\n\");")
gr.printFile("    switch (Error)")
gr.printFile("    {   ")
gr.printFile("    case E_OS_ACCESS:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_ACCESS\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_CALLEVEL:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_CALLEVEL\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_ID:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_ID\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_LIMIT:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_LIMIT\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_NOFUNC:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_NOFUNC\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_RESOURCE:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_RESOURCE\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_STATE:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_STATE\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_VALUE:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_VALUE\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_SYS_NOFUNC:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_SYS_NOFUNC\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_SERVICEID:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_SERVICEID\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_INTERFERENCE_DEADLOCK:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_INTERFERENCE_DEADLOCK\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_SYS_OK_CROSSCORE:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_SYS_OK_CROSSCORE\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_SPINLOCK:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_SPINLOCK\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    case E_OS_DISABLEDINT:")
gr.printFile("        PrintText(\"[ErrorHook]: E_OS_DISABLEDINT\\r\\n\");")
gr.printFile("        break;")
gr.printFile("    default:")
gr.printFile("        PrintText(\"[ErrorHook]: \\r\\n\");")
gr.printFile("        break;")
gr.printFile("    }")
gr.printFile("    //EnableMPU();")
gr.printFile("}\n")



gr.printFile("/* Brief StartupHook */")
gr.printFile("void StartupHook(void)")
gr.printFile("{")
gr.printFile("}\n")

gr.printFile("/* Brief ShutdownHook */")
gr.printFile("void ShutdownHook(StatusType Error)")
gr.printFile("{")
gr.printFile("}\n")


gr.printFile("ProtectionReturnType ProtectionHook(StatusType Error)")
gr.printFile("{")   
gr.printFile("    ProtectionReturnType retMsg = PRO_IGNORE;")
gr.printFile("    itoa_16_show_id(my_prot_err_str_arr, CURRENTTASK.currentID);")
gr.printFile("    switch (Error)")
gr.printFile("    {")
gr.printFile("    case E_OS_PROTECTION_ARRIVAL:\n")
gr.printFile("        retMsg = PRO_IGNORE;")
gr.printFile("        break;")
gr.printFile("    case E_OS_PROTECTION_LOCKED:\n")
gr.printFile("        retMsg = PRO_IGNORE;")
gr.printFile("        break;")
gr.printFile("    case E_OS_PROTECTION_TIME:\n")
gr.printFile("        retMsg = PRO_TERMINATETASKISR;")
gr.printFile("        break;")
gr.printFile("    case E_OS_PROTECTION_MEMORY:\n")
gr.printFile("        retMsg = PRO_TERMINATEAPPL;")
gr.printFile("        break;")
gr.printFile("    case E_OS_STACKFAULT:\n")
gr.printFile("        retMsg = PRO_TERMINATETASKISR;")
gr.printFile("        break;")
gr.printFile("    default:\n")
gr.printFile("        break;")
gr.printFile("    }\n")
gr.printFile("return retMsg;")
gr.printFile("}")